
generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(uuid())
  name String
  profilePicture String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Model{
  id String @id @default(uuid())
 name String
  age Int
  userId String
  type TypeEnum
  ethinicity EthinicityEnum
  triggerWord String?
  tensorPath String?
  trainingStatus ModelTrainingStatusEnum @default(Pending)
 bald Boolean
 eyeColor EyeColorEnum
 trainingImages TrainingImages[]
 outputImages OutputImages[]
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
}


model TrainingImages{
  id String @id @default(uuid())
  imageUrl String
  modelId String
  model Model @relation(fields:[modelId], references: [id])
}
model OutputImages{
  id String @id @default(uuid())
  imageUrl String @default("")
  modelId String
  userId String
  prompt String
  status OutputImagesStatusEnum @default(Pending)
  model Model @relation(fields:[modelId],references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Packs{
  id String @id @default(uuid())
  name String
  prompts PackPrompts[]
}
model PackPrompts{
  id String @id @default(uuid())
  prompt String
  packId String
  pack Packs @relation(fields:[packId],references: [id])
}
enum TypeEnum{
  Man
  Woman
  Other
}
enum EthinicityEnum{
  White 
  Black
  Asian_American                    @map("Asian American")
     East_Asian                     @map("East Asian")
     South_East_Asian               @map("South East Asian")
  South_Asian                       @map("South Asian")
     Middle_Eastern                 @map("Middle Eastern")
     Pacific 
     Hispanic
}
enum EyeColorEnum{
  Brown 
  Blue
  Hazel
  Gray
}
enum OutputImagesStatusEnum{
  Pending 
  generated
  Failed
}
enum ModelTrainingStatusEnum{
  Pending
  generated
  Failed
}